name: CI/CD Pipeline

on:
  push:
    branches:
      - jeonjiho/ci-cd

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Setup Gradle
        uses: gradle/actions/setup-gradle@af1da67850ed9a4cedd57bfd976089dd991e2582

      - name: Install docker-compose
        run: |
          sudo curl -L "https://github.com/docker/compose/releases/download/v2.24.7/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
          sudo chmod +x /usr/local/bin/docker-compose

      - name: Build with Gradle
        run: |
          chmod +x ./gradlew
          ./gradlew clean build -x test

      - name: Start Docker Compose
        run: |
          docker-compose -f docker-compose.yml up -d

      - name: Wait for services
        run: |
          until docker-compose -f docker-compose.yml exec -T db mysqladmin ping -h db -u root -p1234; do echo "Waiting for MySQL..."; sleep 1; done
          until docker-compose -f docker-compose.yml exec -T redis redis-cli ping; do echo "Waiting for Redis..."; sleep 1; done

      - name: Test with Gradle
        run: |
          ./gradlew test --info

      - name: Stop Docker Compose
        if: always()
        run: |
          docker-compose -f docker-compose.yml down

      - name: Upload test reports
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: test-reports
          path: build/reports/tests/test/

  deploy:
    needs: build-and-test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4.0.2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID_JIHO }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY_JIHO }}
          aws-region: ap-northeast-2

      - name: Login to Amazon ECR
        run: |
          aws ecr get-login-password --region ap-northeast-2 | docker login --username AWS --password-stdin 600627346244.dkr.ecr.ap-northeast-2.amazonaws.com

      - name: Build and Push to ECR
        run: |
          docker build -t plus-project .
          docker tag plus-project:latest 600627346244.dkr.ecr.ap-northeast-2.amazonaws.com/plus-project:latest
          docker push 600627346244.dkr.ecr.ap-northeast-2.amazonaws.com/plus-project:latest