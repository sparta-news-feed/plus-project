name: CI/CD Pipeline
on:
  push:
    branches:
      - main

jobs:
  build-test:
    runs-on: ubuntu-latest
    # 만약 테스트용 Secrets가 없다면 기본값이 사용됩니다.
    env:
      JWT_SECRET_KEY: ${{ secrets.JWT_SECRET_KEY }}
      SPRING_DATASOURCE_USERNAME: ${{ secrets.SPRING_DATASOURCE_USERNAME }}
      SPRING_DATASOURCE_PASSWORD: ${{ secrets.SPRING_DATASOURCE_PASSWORD }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Create application-test.yml
        run: |
          mkdir -p src/test/resources
          cat <<EOF > src/test/resources/application-test.yml
          spring:
            datasource:
              url: jdbc:mysql://localhost:3306/plus_project
              username: ${SPRING_DATASOURCE_USERNAME}
              password: ${SPRING_DATASOURCE_PASSWORD}
              driver-class-name: com.mysql.cj.jdbc.Driver
            jpa:
              hibernate:
                ddl-auto: create
            data:
              redis:
                host: localhost
                port: 6379
          jwt:
            secret:
              key: ${JWT_SECRET_KEY}
          EOF

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Setup Gradle
        uses: gradle/actions/setup-gradle@v4

      - name: Build without tests
        run: |
          chmod +x ./gradlew
          ./gradlew clean build -x test

      - name: Install docker-compose
        run: |
          DOCKER_COMPOSE_VERSION=2.20.2
          sudo curl -L "https://github.com/docker/compose/releases/download/v${DOCKER_COMPOSE_VERSION}/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
          sudo chmod +x /usr/local/bin/docker-compose

      - name: Start test environment (MySQL & Redis only)
        run: docker-compose -f docker-compose.test.yml up -d

      - name: Wait for services to be ready
        run: |
          echo "Waiting for MySQL..."
          for i in {1..60}; do
            if nc -z localhost 3306; then
              echo "MySQL is ready"
              break
            fi
            sleep 2
          done
          echo "Waiting for Redis..."
          for i in {1..60}; do
            if nc -z localhost 6379; then
              echo "Redis is ready"
              break
            fi
            sleep 2
          done

      - name: Run Tests
        run: ./gradlew test

      - name: Stop test environment
        if: always()
        run: docker-compose -f docker-compose.test.yml down

  deploy:
    needs: build-test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Setup Gradle
        uses: gradle/actions/setup-gradle@af1da67850ed9a4cedd57bfd976089dd991e2582

      - name: Build with Gradle for deployment
        run: |
          chmod +x ./gradlew
          ./gradlew clean build -x test

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4.0.2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID_JIHO }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY_JIHO }}
          aws-region: ap-northeast-2

      - name: Login to Amazon ECR
        run: |
          aws ecr get-login-password --region ap-northeast-2 | docker login --username AWS --password-stdin 600627346244.dkr.ecr.ap-northeast-2.amazonaws.com

      - name: Build and Push to ECR
        run: |
          docker build -t plus-project .
          docker tag plus-project:latest 600627346244.dkr.ecr.ap-northeast-2.amazonaws.com/plus-project:latest
          docker push 600627346244.dkr.ecr.ap-northeast-2.amazonaws.com/plus-project:latest

      - name: Deploy to EC2
        run: |
          echo "${{ secrets.EC2_SSH_KEY_JIHO }}" > private_key.pem
          chmod 600 private_key.pem
          ls -l docker-compose.yml || echo "docker-compose.yml not found in local repo"
          scp -v -o StrictHostKeyChecking=no -i private_key.pem docker-compose.yml ubuntu@${{ secrets.EC2_HOST_JIHO }}:~/docker-compose.yml
          ssh -v -o StrictHostKeyChecking=no -i private_key.pem ubuntu@${{ secrets.EC2_HOST_JIHO }} << 'EOF'

            sudo aws ecr get-login-password --region ap-northeast-2 | sudo docker login --username AWS --password-stdin 600627346244.dkr.ecr.ap-northeast-2.amazonaws.com || echo "ECR login failed"

            # 기존 리소스 정리
            sudo docker stop $(sudo docker ps -q) || true
            sudo docker rm $(sudo docker ps -aq) || true
            sudo docker rmi $(sudo docker images -q) -f || true
            sudo docker system prune -a -f --volumes

            # 최신 이미지 Pull
            sudo docker pull 600627346244.dkr.ecr.ap-northeast-2.amazonaws.com/plus-project:latest || echo "Failed to pull myapp image"

            # docker-compose.yml 확인
            ls -l ~/docker-compose.yml || echo "docker-compose.yml not found on EC2"

            # docker-compose 실행
            sudo docker-compose -f ~/docker-compose.yml up -d
            sudo docker ps
          EOF